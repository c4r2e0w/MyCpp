/*УРОК 4. Сложные лямбда-функции
Задание
Потренируйтесь в работе с более сложными лямбда-функциями.
Напишите программу, которая считывает из стандартного ввода неотрицательное целое число N, за которым следуют N целых чисел, разделённых одним пробелом. 
Эти числа должны быть отсортированы в следующем порядке:
сначала должны идти чётные числа по возрастанию,
затем нечётные числа по убыванию.
Отсортированные числа выведите в стандартный поток. После каждого числа, включая последнее, должен быть выведен один пробельный символ.
Если число N равно нулю, программа не должна считывать другие числа и выводить что-либо в поток вывода.
Код ввода и вывода чисел уже дан в заготовке. Напишите тело лямбда-функции, переданной в алгоритм sort.
Примеры
Пример 1
Входные данные:
11 4 6 3 2 7 5 8 9 2 1 5  
Результат:
2 2 4 6 8 9 7 5 5 3 1  
Объяснение: на вход подано число 11, за которым следует 11 целых чисел. Программа выводит сначала чётные числа в порядке возрастания, затем нечетные в порядке убывания.
Пример 2
Входные данные:
0 
Результат:

 
Объяснение: на вход подано число 0. Программа ничего не выводит.
Как будет тестироваться ваш код
Тренажёр подаст на вход программе различные варианты входных данных и сравнит вывод программы с ожидаемым значением. Гарантируется, что число N будет неотрицательным, а за ним будут следовать ровно N целых чисел, разделённых пробелами.*/

#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

vector<int> ReadNumbers() {
    int count;
    cin >> count;

    vector<int> numbers;
    for (int i = 0; i < count; ++i) {
        int number;
        cin >> number;
        numbers.push_back(number);
    }

    return numbers;
}

void PrintNumbers(const vector<int>& numbers) {
    for (auto number : numbers) {
        cout << number << " "s;
    }
}

int main() {
    vector<int> numbers = ReadNumbers();

    sort(numbers.begin(), numbers.end(), [](int n1, int n2) {
        if (n1 % 2 == 0 && n2 % 2 != 0) return true;  // Чётные числа впереди нечётных
        if (n1 % 2 != 0 && n2 % 2 == 0) return false; // Нечётные числа позади чётных
        if (n1 % 2 == 0 && n2 % 2 == 0) return n1 < n2; // Сравнение чётных по возрастанию
        return n1 > n2;  // Сравнение нечётных по убыванию
    });

    PrintNumbers(numbers);
}

/*Для сортировки примените функцию sort, в которую передайте компаратор, который бы упорядочил числа нужным способом. В компараторе сравните числа, используя такой алгоритм:
x и y — чётные. Верните результат сравнения x < y
x чётное, y нечётное. Числа упорядочены, верните true
x нечётное, y чётное. Числа неупорядочены, верните false
x и y — нечётные. Верните результат сравнения x > y*/