//Спринт 3/22: Спринт 1 → Тема 2/5: Структуры и классы → Урок 7/11

Классы или структуры?
В прошлом уроке вы узнали про классы. Их способность скрывать своё внутреннее устройство — один из важнейших принципов объектно-ориентированного программирования. Он называется инкапсуляцией.
На первый взгляд, эта практика ограничивает свободы. Но она позволяет менять детали реализации класса, не ломая использующий его код. Инкапсуляция даёт гарантии, что нигде в программе никто не обращается к внутреннему состоянию класса в обход его методов.
Например, в классе Time вы легко можете изменить приватную часть класса: вместо полей, которые хранят часы, минуты и секунды, начать хранить количество секунд, прошедших с начала суток. Да, надо будет внести изменения в методы класса Time. Но зато код, использующий класс Time, изменять не придётся. Классы, как и функции, пишутся один раз, а используются многократно.
class Time {
public:
    int GetHours() {
        return seconds_since_midnight_ / (60 * 60);
    }
    int GetMinutes() {
        return (seconds_since_midnight_ / 60) % 60;
    }
    int GetSeconds() {
        return seconds_since_midnight_ % 60;
    }
    void Set(int hours, int minutes, int seconds) {
        /* проверка аргументов пропущена для краткости */
        seconds_since_midnight_ = ((hours * 60) + minutes) * 60 + seconds;
    }
private:
    int seconds_since_midnight_ = 0;
}; 
Вспомним, чем отличается класс от структуры.
Выберите истинные утверждения.


Класс может хранить как данные, так и методы. Структуры могут хранить только данные.

Правильный ответ
В структуре по умолчанию используется публичный уровень доступа, а в классе — приватный.

В структуре по умолчанию используется приватный уровень доступа, а в классе — публичный.

Поля структуры могут быть только публичными, а поля класса — только приватными.

Внутри класса полями могут быть как примитивные типы, так и структуры и классы. Внутри структур полями могут быть только примитивные типы данных.
Основное различие между структурами и классами в C++ — уровень доступа по умолчанию. И классы, и структуры могут иметь методы и данные. Ещё одно отличие — тип наследования по умолчанию — мы рассмотрим в одном из будущих спринтов.
В C++ классы и структуры взаимозаменяемы. Возникает вопрос: нужны ли тогда структуры. Да, ведь они служат для совместимости с языком C и библиотеками на этом языке. Но не только для этого. Случаи использования классов и структур отличаются и описаны в наборе рекомендаций для кода на C++, C++ Core Guidelines. Выбор между классом и структурой осуществляется по следующим правилам:
Если у класса есть инвариант (подсказка: условие, которому должны удовлетворять поля объекта, чтобы состояние объекта было согласованным), используйте class.
Если инварианта нет и члены-данные могут меняться независимо, используйте struct.
Если хотите разделить интерфейс и реализацию, используйте class.
В следующем уроке мы рассмотрим применение классов для улучшения поисковой системы.
