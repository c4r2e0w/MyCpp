Задание
В приют привозят собак разных пород. Информация о них хранится в двух словарях:
словарь shelter хранит текущее количество собак каждой породы,
словарь max_amount — максимальное возможное количество собак каждой породы, которое может вместить приют. Может иметь значение 0.
Оба словаря используют название породы в качестве ключа и количество в качестве значения.
Напишите функцию CountAndAddNewDogs, которая будет на основании вектора с породами поступивших собак обновлять словарь shelter и возвращать количество собак, которых удалось пристроить в приют.
Что нужно сделать
Напишите функцию CountAndAddNewDogs, которая будет на основании вектора с породами поступивших собак обновлять словарь shelter и возвращать количество собак, которых удалось пристроить в приют. Для решения используйте лямбда-функцию.
Формат входных данных
Гарантируется, что никакие другие собаки, кроме известных из словаря max_amount, в приют не приедут. Однако в словаре shelter могут изначально присутствовать не все породы.
В векторе new_dogs перечисляются породы поступивших собак в произвольном порядке. Значения в этом векторе могут повторяться. 
Примеры
Пример 1
Входные данные:
map<string, int> shelter = {{"landseer"s, 1}, {"otterhound"s, 2}, {"pekingese"s, 2}, {"pointer"s, 3}};
const map<string, int> max_amount = {{"landseer"s, 2}, {"otterhound"s, 3}, {"pekingese"s, 4}, {"pointer"s, 7}};
const vector<string> new_dogs = {"landseer"s, "otterhound"s, "otterhound"s, "otterhound"s, "pointer"s};
cout << CountAndAddNewDogs(new_dogs, max_amount, shelter) << endl; 
Результат:
3 
При этом словарь shelter должен изменить значение:
{{"landseer"s, 2}, {"otterhound"s, 3}, {"pekingese"s, 2}, {"pointer"s, 4}}; 
Пример 2
Входные данные:
map<string, int> shelter = {{"beagle"s, 4}, {"dachshund"s, 1}};
const map<string, int> max_amount = {{"beagle"s, 4}, {"dachshund"s, 2}, {"pug"s, 0}};
const vector<string> new_dogs = {"beagle"s, "pug"s, "pug"s, "beagle"s};
cout << CountAndAddNewDogs(new_dogs, max_amount, shelter) << endl; 
Результат:
0 
При этом словарь shelter изменился:
{{"beagle"s, 4}, {"dachshund"s, 1}, {"pug"s, 0}}; 
Требования
Не меняйте сигнатуру функции CountAndAddNewDogs
Для нахождения ответа используйте алгоритм count_if.
Вектор max_amount принимается по константной ссылке и поэтому не должен меняться. В частности, с ним запрещается использовать операцию [].
Тело функции должно состоять из одного return.
Не используйте циклы.
Как будет тестироваться ваш код
Тренажёр проверит работу функции CountAndAddNewDogs, передавая ей различные комбинации входных данных и сравнивая возвращаемое значение и содержимое контейнера shelter c ожидаемым.

#include <map>
#include <string>
#include <vector>
#include <iostream>

using namespace std;

int CountAndAddNewDogs(const vector<string>& new_dogs, const map<string, int>& max_amount,
                       map<string, int>& shelter) {
    //...
}

int main() {
    map<string, int> shelter {
        {"shepherd"s, 1},
        {"corgi"s, 3},
    };

    map<string, int> max_amount {
        {"shepherd"s, 2},
        {"corgi"s, 3},
        {"shiba inu"s, 1},
    };

    cout << CountAndAddNewDogs({"shepherd"s, "shiba inu"s, "shiba inu"s, "corgi"s}, max_amount, shelter) << endl;
}

/*Примените count_if, чтобы посчитать количество собак, которых удалось устроить в приют.
В качестве аргумента count_if используйте лямбда-функцию, которая возвратит true, если собаку удалось пристроить, и false, если нет. Так вы посчитаете количество собак, которых получилось пристроить.
Не забудьте о том, что колбэк-функция для алгоритма count_if должна иметь ровно один аргумент, который будет пробегать все элементы переданного контейнера. Аккуратно разберитесь, что должно быть аргументом, а что захватом.
Обратите внимание, аргумент max_amount — константный словарь. Для доступа к его значениям нельзя использовать квадратные скобки. Примените метод at. Подробности можете найти в уроке «Словари и константность» темы «Map». Воспользуйтесь поиском по материалам.
Помимо возврата булевого значения лямбда-функция должна модифицировать словарь. Будьте внимательны: чтобы модифицировать именно сам аргумент объемлющей функции, а не его копию, нужно применить захват по ссылке.
При использовании квадратных скобок с неконстантным словарём отсутствующий ключ автоматически добавится в словарь. Его значение будет нулевым. При возникновении сложностей вы можете ознакомиться с видео-разбором решения этой задачи. */